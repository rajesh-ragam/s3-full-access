provider "aws" {
     region = "${var.aws_region}"
}
#
# vpc
#
resource "aws_vpc" "default" {
    cidr_block = "${var.vpc_cidr}"
    enable_dns_hostnames = true
    tags = {
        name = "${var.vpc_name}"
    }
}
#
#internet_gateway
#

resource "aws_internet_gateway" "default" {
    vpc_id = "${aws_vpc.default.id}"
        tags = {
        name = "${var.vpc_name}_IGW}"
    }
}
#
#public_subnet
#

resource "aws_subnet" "public_subnets" {
    count = var.create_public_subnets ? 1 : 0
    vpc_id = "${aws_vpc.default.id}"
    cidr_block = "${element(var.public_cidrs, count.index)}"
    availability_zone = "${element(var.azs, count.index)}"
    tags = {
        name = "${var.vpc_name}-subnet-${count.index+1}"
    }
}
#
#private_subnet
#

resource "aws_subnet" "private_subnets" {
    count = var.create_private_subnets ? 2 : 0
    vpc_id = "${aws_vpc.default.id}"
    cidr_block = "${element(var.private_cidrs, count.index)}"
    availability_zone = "${element(var.azs, count.index)}"

    tags = {
        name = "${var.vpc_name}-subnet-${count.index+1}"
    }
}

#
#route_table_public
#

resource "aws_route_table" "public" {
    vpc_id = "${aws_vpc.default.id}"
    route {
        cidr_block = "0.0.0.0/0"
        gateway_id = "${aws_internet_gateway.default.id}"
    }

    tags = {
        name = "${var.vpc_name}-public_RT}"
    }
}
#
#route_table_association  public
#

resource "aws_route_table_association" "public" {
    count = var.aws_route_table_association_public ? 1 : 0
    subnet_id = "${element(aws_subnet.public_subnets.*.id, count.index)}"
    route_table_id = "${aws_route_table.public.id}"
}

resource "aws_security_group" "allow_all" {
  name        = "allow_all"
  description = "Allow all inbound traffic"
  vpc_id      = "${aws_vpc.default.id}"

  ingress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
    }
}
resource "aws_route_table" "private" {
     vpc_id = "${aws_vpc.default.id}"

    tags = {
        name = "${var.vpc_name}-Private_RT}"
    }
}

resource "aws_route_table_association" "private" {
    count = 2
    subnet_id = "${element(aws_subnet.private_subnets.*.id, count.index)}"
    route_table_id = "${aws_route_table.private.id}"

}

resource "aws_route" "nat_gateway" {
  count = 1
  route_table_id = "${aws_route_table.private.id}"
  destination_cidr_block   = "0.0.0.0/0"
  nat_gateway_id           = "${element(aws_nat_gateway.nat.*.id, count.index)}"
  depends_on             = [
          aws_route_table.private
          ]
}


resource "aws_nat_gateway" "nat" {
    count = var.create_nat_gateway ? 1 : 0
    subnet_id = "${element(aws_subnet.public_subnets.*.id, count.index)}"
    allocation_id = "${aws_eip.nat.id}"

        tags = {
        name = "${var.nat_name}"
    }
}
resource "aws_eip" "nat" {
      vpc = "true"
}

#
#instance
#

resource "aws_instance" "default" {
     count = var.create_aws_instance ? 1 : 0
     ami               = "${lookup(var.amis, var.aws_region)}"
     availability_zone = "${element(var.azs, count.index)}"
     instance_type   = "${element(var.instance_type, count.index)}"
     key_name        =  "${lookup(var.keys, var.aws_region)}"
     iam_instance_profile = "${aws_iam_instance_profile.test_profile.name}"
     subnet_id       = "${element(aws_subnet.private_subnets.*.id, count.index)}"
     vpc_security_group_ids = ["${aws_security_group.allow_all.id}"]
     associate_public_ip_address = "${var.allocate_public_ip}"
     tags = {
         Name = "Server-1"
       Owner = "dataevolve"
     }
 }
#  dynamic "ebs_block_device" {
#    for_each = var.ebs_block_device
#    content {
#      delete_on_termination = "yes"
#        availability_zone = "${element(var.azs, count.index)}"
#        size              = "${element(var.ebs_volume_size, count.index)}"
#        type              = "${element(var.ebs_volume_type, count.index)}"
#        snapshot_id       = "${lookup(var.snap-id, var.aws_region)}"

#      tags =  {
#          Name = "ebs_vol"
#        }
#    }
#  }


resource "aws_ebs_volume" "default" {
  count             = var.create_ebs_volume ? 1 : 0
  availability_zone = "${element(var.azs, count.index)}"
  size              = "${element(var.ebs_volume_size, count.index)}"
  type              = "${element(var.ebs_volume_type, count.index)}"
  snapshot_id       = "${lookup(var.snap-id, var.aws_region)}"
    lifecycle {
    prevent_destroy = false
   }
}


resource "aws_volume_attachment" "default" {
  count       = 1
  device_name = "${element(var.ebs_device_name, count.index)}"
  volume_id   = "${element(aws_ebs_volume.default.*.id, count.index)}"
  instance_id = "${element(aws_instance.default.*.id, count.index)}"
}



#resource "aws_s3_bucket" "s3_default" {
#  count = var.create_bucket == true ? 1 : 0

#   bucket      = "var.bucket_name"
#  versioning {
#    enabled    = var.versioning
#  }
#}
resource "aws_iam_role" "ec2_s3_access_role" {
   name    = "s3-role"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

resource "aws_iam_policy" "policy" {
  name        = "test-policy"
  description = "A test policy"
  policy      = <<EOF
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "s3:*",
            "Resource": "*"
        }
    ]
}
EOF
}

resource "aws_iam_policy_attachment" "test-attach" {
  name       = "test-attachment"
  roles      = ["${aws_iam_role.ec2_s3_access_role.name}"]
  policy_arn = "${aws_iam_policy.policy.arn}"
}

resource "aws_iam_instance_profile" "test_profile" {
  name  = "test_profile"
  role = "${aws_iam_role.ec2_s3_access_role.name}"
}

